// ========== LEXER ==========
// Definición de tokens

// Palabras reservadas
program      : 'p''r''o''g''r''a''m' ;
var          : 'v''a''r' ;
main         : 'm''a''i''n' ;
end          : 'e''n''d' ;
if           : 'i''f' ;
else         : 'e''l''s''e' ;
while        : 'w''h''i''l''e' ;
do           : 'd''o' ;
print        : 'p''r''i''n''t' ;
int          : 'i''n''t' ;
float        : 'f''l''o''a''t' ;
void         : 'v''o''i''d' ;

// Identificadores y constantes
_lowcase     : 'a'-'z' ;
_upcase      : 'A'-'Z' ;
_digit       : '0'-'9' ;
_symbol      : ' ' | '!' | '#' | '$' | '%' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' |
            ':' | ';' | '<' | '=' | '>' | '?' | '@' |
            '[' | ']' | '^' | '_' | '`' | '{' | '|' | '}' | '~' ;
_chars       : _lowcase | _upcase | _digit | _symbol ;

id           : _lowcase { (_lowcase | _upcase | _digit) } ;
cte_int      : _digit { _digit } ;
cte_float    : _digit { _digit } '.' _digit { _digit } ;
cte_string   : '"' { _chars } '"' ;

// Operadores aritméticos
plus         : '+' ;
minus        : '-' ;
times        : '*' ;
divide       : '/' ;

// Comparadores
gt           : '>' ;
lt           : '<' ;
neq          : '!''=' ;

// Delimitadores
assign       : '=' ;
semicolon    : ';' ;
colon        : ':' ;
comma        : ',' ;
lparen       : '(' ;
rparen       : ')' ;
lbrace       : '{' ;
rbrace       : '}' ;
lbracket     : '[' ;
rbracket     : ']' ;

// Tokens ignorados
!whitespace  : ' ' | '\t' | '\n' | '\r' ;


// ========== PARSER ==========
// Definición de Producciones (Reglas de la Gramática)

<<
import(
    "BabyDuck/ast"
    "BabyDuck/token"
)
>>

Program
    : program id semicolon VarSection FuncSection main Body end
    <<
        func() (Attrib, error) {
            id := string($1.(*token.Token).Lit)
            vars := $3.([]*ast.VarNode)
            body := $6.([]ast.Attrib)

            // Inicializar programa como una función
            programNode, err := ast.NewFunction(id, vars, body)
            if err != nil {
                return nil, err
            }

            // Establecer ámbito global
            ast.SetGlobalScope(programNode.Id)

            // Ejecutar programa
            return nil, ast.ExecuteFunction(programNode)
        }()
    >>
    ;

// Declaración opcional de variables
VarSection
    : var VarList
    << $1, nil >>
    | "empty"
    << []*ast.VarNode{}, nil >>
    ;

// Lista de declaraciones de variables (1 o más)
VarList
    : VarDeclaration VarList
    << append($0.([]*ast.VarNode), $1.([]*ast.VarNode)...), nil >>
    | VarDeclaration
    << $0, nil >>
    ;

// Declaración de una variable
VarDeclaration
    : IdList colon Type semicolon
    <<
        func() (Attrib, error) {
            ids := $0.([]*token.Token)
            typ := string($2.(*token.Token).Lit)
            vars := []*ast.VarNode{}
            
            // Juntar ids en la lista de variables
            for _, id := range ids {
                vars = append(vars, &ast.VarNode{
                    Id: string(id.Lit),
                    Type: typ,
                    Value: ""},
                )
            }

            return vars, nil
        }()
    >>
    ;

// Lista de identificadores separados por coma (1 o más)
IdList
    : id comma IdList
    << append([]*token.Token{$0.(*token.Token)}, $2.([]*token.Token)...), nil >>
    | id
    << []*token.Token{$0.(*token.Token)}, nil >>
    ;

// Tipo de la variable
Type
    : int
    << $0, nil >>
    | float
    << $0, nil >>
    ;

// Sección de funciones (0 o más)
FuncSection
    : FuncDeclaration FuncSection
    | "empty"
    ;

// Declaración de función
FuncDeclaration
    : void id lparen FuncParams rparen lbracket VarSection Body rbracket semicolon
    <<
        func() (Attrib, error) {
            id := string($1.(*token.Token).Lit)
            vars := append($3.([]*ast.VarNode), $6.([]*ast.VarNode)...)
            body := $7.([]ast.Attrib)

            // Crear y registrar la función
            return ast.NewFunction(id, vars, body)
        }()
    >>
    ;

// Parámetros de la función (0 o más)
FuncParams
    : ParamList
    << $0, nil >>
    | "empty"
    << []*ast.VarNode{}, nil >>
    ;

// Lista de parámetros (1 o más)
ParamList
    : Param comma ParamList
    << append([]*ast.VarNode{$0.(*ast.VarNode)}, $2.([]*ast.VarNode)...), nil >>
    | Param
    << []*ast.VarNode{$0.(*ast.VarNode)}, nil >>
    ;

// Declaración de un parámetro
Param
    : id colon Type
    <<
        &ast.VarNode{
            Id: string($0.(*token.Token).Lit),
            Type: string($2.(*token.Token).Lit),
            Value: "",
        }, nil
    >>
    ;

// Cuerpo de una función o bloque
Body
    : lbrace StatementOptional rbrace
    << $1, nil >>
    ;

// Declaración opcional de sentencias (0 o más)
StatementOptional
    : Statement StatementOptional
    << append([]ast.Attrib{$0}, $1.([]ast.Attrib)...), nil >>
    | "empty"
    << []ast.Attrib{}, nil >>
    ;

// Declaración de una sentencia
Statement
    : Assign
    << $0, nil >>
    | Condition
    | Cycle
    | F_Call
    | Print
    << $0, nil >>
    ;

// Asignación de un valor
Assign
    : id assign Expression semicolon
    <<
        &ast.AssignNode{
            Id: string($0.(*token.Token).Lit),
            Exp: $2.(ast.Quad),
        }, nil
    >>
    ;

// Expresión
Expression
    : Exp
    << $0, nil >>
    | Exp RelOp Exp
    << 
        &ast.ExpressionNode{
            Left:  $0.(ast.Quad),
            Op:    $1.(string),
            Right: $2.(ast.Quad),
        }, nil
    >>
    ;

// Operadores relacionales
RelOp
    : gt
    << ">", nil >>
    | lt
    << "<", nil >>
    | neq
    << "!=", nil >>
    ;

// Expresión aritmética
Exp
    : Exp plus Term
    <<
        &ast.ExpressionNode{
            Op:    "+",
            Left:  $0.(ast.Quad),
            Right: $2.(ast.Quad),
        }, nil
    >>
    | Exp minus Term
    <<
        &ast.ExpressionNode{
            Op:    "-",
            Left:  $0.(ast.Quad),
            Right: $2.(ast.Quad),
        }, nil
    >>
    | Term
    << $0, nil >>
    ;

// Término en la expresión
Term
    : Term times Factor
    <<
        &ast.ExpressionNode{
            Op:    "*",
            Left:  $0.(ast.Quad),
            Right: $2.(ast.Quad),
        }, nil
    >>
    | Term divide Factor
    <<
        &ast.ExpressionNode{
            Op:    "/",
            Left:  $0.(ast.Quad),
            Right: $2.(ast.Quad),
        }, nil
    >>
    | Factor
    << $0, nil >>
    ;

// Factor de la expresión
Factor
    : lparen Expression rparen
    << $1, nil >>
    | minus Atom
    <<
        &ast.ExpressionNode{
            Op:    "-",
            Left:  &ast.VarNode{
                Id: "",
                Type: "int",
                Value: "0",
            },
            Right: $1.(ast.Quad),
        }, nil
    >>
    | Atom
    << $0, nil >>
    ;

// Átomo
Atom
    : Cte
    << $0, nil >>
    | id
    <<
        &ast.VarNode{
            Id: string($0.(*token.Token).Lit),
            Type: "",
            Value: "",
        }, nil
    >>
    ;

// Constante
Cte
    : cte_int
    <<
        &ast.VarNode{
            Id: "",
            Type: "int",
            Value: string($0.(*token.Token).Lit),
        }, nil
    >>
    | cte_float
    <<
        &ast.VarNode{
            Id: "",
            Type: "float",
            Value: string($0.(*token.Token).Lit),
        }, nil
    >>
    ;

// Condición if-else
Condition
    : if lparen Expression rparen Body ElseOptional semicolon
    ;

// Bloque else opcional (0 o 1)
ElseOptional
    : else Body
    | "empty"
    ;

// Ciclo while-do
Cycle
    : while lparen Expression rparen do Body semicolon
    ;

// Llamada a función
F_Call
    : id lparen F_Args rparen semicolon
    ;

// Lista de argumentos (0 o más expresiones)
F_Args
    : F_ArgsList
    | "empty"
    ;

// Lista separada por comas (1 o más expresiones)
F_ArgsList
    : Expression comma F_ArgsList
    | Expression
    ;

// Instrucción de impresión
Print
    : print lparen PrintVarList rparen semicolon
    << &ast.PrintNode{Items: $2.([]ast.Attrib)}, nil >>
    ;

// Lista de variables a imprimir (1 o más)
PrintVarList
    : PrintVar
    << []ast.Attrib{$0.(ast.Attrib)}, nil >>
    | PrintVar comma PrintVarList
    << append([]ast.Attrib{$0.(ast.Attrib)}, $2.([]ast.Attrib)...), nil >>
    ;

// Variable a imprimir
PrintVar
    : Expression
    << $0, nil >>
    | cte_string
    << string($0.(*token.Token).Lit), nil >>
    ;