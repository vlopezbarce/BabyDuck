// ========== LEXER ==========

// Identifiers and literals
_lowcase     : 'a'-'z' ;
_upcase      : 'A'-'Z' ;
_digit       : '0'-'9' ;
id           : _lowcase { (_lowcase | _upcase | _digit) } ;
intlit       : _digit { _digit } ;
floatlit     : _digit { _digit } '.' _digit { _digit } ;

// Operators
plus         : '+' ;
minus        : '-' ;
times        : '*' ;
divide       : '/' ;

// Relational operators
gt           : '>' ;
lt           : '<' ;

// Symbols
assign       : '=' ;
semicolon    : ';' ;
colon        : ':' ;
comma        : ',' ;
lparen       : '(' ;
rparen       : ')' ;
lbrace       : '{' ;
rbrace       : '}' ;
lbracket     : '[' ;
rbracket     : ']' ;

// Ignored tokens
!whitespace  : ' ' | '\t' | '\n' | '\r' ;


// ========== PARSER ==========

Program
    : "program" id semicolon VarOptional "main" Body "end"
    ;

// Handles optional variable declarations
VarOptional
    : VarSection
    | "empty"
    ;

// Handles all variable declarations
VarSection
    : "var" VarDeclarationList
    ;

// Handles multiple variable declarations (one or more)
VarDeclarationList
    : VarDeclaration
    | VarDeclarationList VarDeclaration
    ;

// Handles one variable declaration
VarDeclaration
    : IdList colon Type semicolon
    ;

// Handles an id declaration (one or more)
IdList
    : id IdListTail
    ;

// Handles multiple id declarations
IdListTail
    : comma id IdListTail
    | "empty"
    ;

Body
    : "empty"
    ;

Type
    : "empty"
    ;