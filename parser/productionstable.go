// Code generated by gocc; DO NOT EDIT.

package parser

import(
    "BabyDuck/ast"
    "BabyDuck/token"
)

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Program	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Program : program id semicolon VarSection FuncSection main Body end	<< func() (Attrib, error) {
            id := string(X[1].(*token.Token).Lit)
            vars := X[3].([]*ast.VarNode)
            funcs := X[4].([]*ast.FuncNode)
            body := X[6].([]ast.Attrib)

            // Crear nodo del programa
            programNode := ast.ProgramNode{
                Id: id,
                Vars: vars,
                Funcs: funcs,
                Body: body,
            }

            return programNode, nil
        }() >>`,
		Id:         "Program",
		NTType:     1,
		Index:      1,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            id := string(X[1].(*token.Token).Lit)
            vars := X[3].([]*ast.VarNode)
            funcs := X[4].([]*ast.FuncNode)
            body := X[6].([]ast.Attrib)

            // Crear nodo del programa
            programNode := ast.ProgramNode{
                Id: id,
                Vars: vars,
                Funcs: funcs,
                Body: body,
            }

            return programNode, nil
        }()
		},
	},
	ProdTabEntry{
		String: `VarSection : var VarList	<< X[1], nil >>`,
		Id:         "VarSection",
		NTType:     2,
		Index:      2,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `VarSection : "empty"	<< []*ast.VarNode{}, nil >>`,
		Id:         "VarSection",
		NTType:     2,
		Index:      3,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []*ast.VarNode{}, nil
		},
	},
	ProdTabEntry{
		String: `VarList : VarDeclaration VarList	<< append(X[0].([]*ast.VarNode), X[1].([]*ast.VarNode)...), nil >>`,
		Id:         "VarList",
		NTType:     3,
		Index:      4,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return append(X[0].([]*ast.VarNode), X[1].([]*ast.VarNode)...), nil
		},
	},
	ProdTabEntry{
		String: `VarList : VarDeclaration	<< X[0], nil >>`,
		Id:         "VarList",
		NTType:     3,
		Index:      5,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VarDeclaration : IdList colon Type semicolon	<< func() (Attrib, error) {
            ids := X[0].([]*token.Token)
            typ := string(X[2].(*token.Token).Lit)
            vars := []*ast.VarNode{}
            
            // Juntar ids en la lista de variables
            for _, id := range ids {
                vars = append(vars, &ast.VarNode{
                    Id: string(id.Lit),
                    Type: typ,
                    },
                )
            }

            return vars, nil
        }() >>`,
		Id:         "VarDeclaration",
		NTType:     4,
		Index:      6,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            ids := X[0].([]*token.Token)
            typ := string(X[2].(*token.Token).Lit)
            vars := []*ast.VarNode{}
            
            // Juntar ids en la lista de variables
            for _, id := range ids {
                vars = append(vars, &ast.VarNode{
                    Id: string(id.Lit),
                    Type: typ,
                    },
                )
            }

            return vars, nil
        }()
		},
	},
	ProdTabEntry{
		String: `IdList : id comma IdList	<< append([]*token.Token{X[0].(*token.Token)}, X[2].([]*token.Token)...), nil >>`,
		Id:         "IdList",
		NTType:     5,
		Index:      7,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return append([]*token.Token{X[0].(*token.Token)}, X[2].([]*token.Token)...), nil
		},
	},
	ProdTabEntry{
		String: `IdList : id	<< []*token.Token{X[0].(*token.Token)}, nil >>`,
		Id:         "IdList",
		NTType:     5,
		Index:      8,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []*token.Token{X[0].(*token.Token)}, nil
		},
	},
	ProdTabEntry{
		String: `Type : int	<< X[0], nil >>`,
		Id:         "Type",
		NTType:     6,
		Index:      9,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Type : float	<< X[0], nil >>`,
		Id:         "Type",
		NTType:     6,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FuncSection : FuncDeclaration FuncSection	<< append([]*ast.FuncNode{X[0].(*ast.FuncNode)}, X[1].([]*ast.FuncNode)...), nil >>`,
		Id:         "FuncSection",
		NTType:     7,
		Index:      11,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return append([]*ast.FuncNode{X[0].(*ast.FuncNode)}, X[1].([]*ast.FuncNode)...), nil
		},
	},
	ProdTabEntry{
		String: `FuncSection : "empty"	<< []*ast.FuncNode{}, nil >>`,
		Id:         "FuncSection",
		NTType:     7,
		Index:      12,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []*ast.FuncNode{}, nil
		},
	},
	ProdTabEntry{
		String: `FuncDeclaration : FuncType id lparen FuncParams rparen lbracket VarSection Body rbracket semicolon	<< func() (Attrib, error) {
            typ := string(X[0].(*token.Token).Lit)
            id := string(X[1].(*token.Token).Lit)
            params := X[3].([]*ast.VarNode)
            vars := X[6].([]*ast.VarNode)
            body := X[7].([]ast.Attrib)

            // Validar y registrar la función en el directorio
            return ast.DeclareFunction(typ, id, params, vars, body)
        }() >>`,
		Id:         "FuncDeclaration",
		NTType:     8,
		Index:      13,
		NumSymbols: 10,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            typ := string(X[0].(*token.Token).Lit)
            id := string(X[1].(*token.Token).Lit)
            params := X[3].([]*ast.VarNode)
            vars := X[6].([]*ast.VarNode)
            body := X[7].([]ast.Attrib)

            // Validar y registrar la función en el directorio
            return ast.DeclareFunction(typ, id, params, vars, body)
        }()
		},
	},
	ProdTabEntry{
		String: `FuncType : void	<< X[0], nil >>`,
		Id:         "FuncType",
		NTType:     9,
		Index:      14,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FuncType : int	<< X[0], nil >>`,
		Id:         "FuncType",
		NTType:     9,
		Index:      15,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FuncType : float	<< X[0], nil >>`,
		Id:         "FuncType",
		NTType:     9,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FuncParams : ParamList	<< X[0], nil >>`,
		Id:         "FuncParams",
		NTType:     10,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FuncParams : "empty"	<< []*ast.VarNode{}, nil >>`,
		Id:         "FuncParams",
		NTType:     10,
		Index:      18,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []*ast.VarNode{}, nil
		},
	},
	ProdTabEntry{
		String: `ParamList : Param comma ParamList	<< append([]*ast.VarNode{X[0].(*ast.VarNode)}, X[2].([]*ast.VarNode)...), nil >>`,
		Id:         "ParamList",
		NTType:     11,
		Index:      19,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return append([]*ast.VarNode{X[0].(*ast.VarNode)}, X[2].([]*ast.VarNode)...), nil
		},
	},
	ProdTabEntry{
		String: `ParamList : Param	<< []*ast.VarNode{X[0].(*ast.VarNode)}, nil >>`,
		Id:         "ParamList",
		NTType:     11,
		Index:      20,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []*ast.VarNode{X[0].(*ast.VarNode)}, nil
		},
	},
	ProdTabEntry{
		String: `Param : id colon Type	<< &ast.VarNode{
            Id: string(X[0].(*token.Token).Lit),
            Type: string(X[2].(*token.Token).Lit),
        }, nil >>`,
		Id:         "Param",
		NTType:     12,
		Index:      21,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return &ast.VarNode{
            Id: string(X[0].(*token.Token).Lit),
            Type: string(X[2].(*token.Token).Lit),
        }, nil
		},
	},
	ProdTabEntry{
		String: `Body : lbrace StatementList rbrace	<< X[1], nil >>`,
		Id:         "Body",
		NTType:     13,
		Index:      22,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `StatementList : Statement StatementList	<< append([]ast.Attrib{ X[0].(ast.Attrib) }, X[1].([]ast.Attrib)...), nil >>`,
		Id:         "StatementList",
		NTType:     14,
		Index:      23,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return append([]ast.Attrib{ X[0].(ast.Attrib) }, X[1].([]ast.Attrib)...), nil
		},
	},
	ProdTabEntry{
		String: `StatementList : "empty"	<< []ast.Attrib{}, nil >>`,
		Id:         "StatementList",
		NTType:     14,
		Index:      24,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []ast.Attrib{}, nil
		},
	},
	ProdTabEntry{
		String: `Statement : Assign	<< X[0], nil >>`,
		Id:         "Statement",
		NTType:     15,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Condition	<< X[0], nil >>`,
		Id:         "Statement",
		NTType:     15,
		Index:      26,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Cycle	<< X[0], nil >>`,
		Id:         "Statement",
		NTType:     15,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : F_Call	<< X[0], nil >>`,
		Id:         "Statement",
		NTType:     15,
		Index:      28,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Print	<< X[0], nil >>`,
		Id:         "Statement",
		NTType:     15,
		Index:      29,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Return	<< X[0], nil >>`,
		Id:         "Statement",
		NTType:     15,
		Index:      30,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Assign : id assign Expression semicolon	<< ast.AssignNode{
            Id: string(X[0].(*token.Token).Lit),
            Exp: X[2].(ast.Attrib),
        }, nil >>`,
		Id:         "Assign",
		NTType:     16,
		Index:      31,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AssignNode{
            Id: string(X[0].(*token.Token).Lit),
            Exp: X[2].(ast.Attrib),
        }, nil
		},
	},
	ProdTabEntry{
		String: `Expression : Exp	<< X[0], nil >>`,
		Id:         "Expression",
		NTType:     17,
		Index:      32,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Expression : Exp RelOp Exp	<< ast.ExpressionNode{
            Left:  X[0].(ast.Attrib),
            Op:    X[1].(int),
            Right: X[2].(ast.Attrib),
        }, nil >>`,
		Id:         "Expression",
		NTType:     17,
		Index:      33,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ExpressionNode{
            Left:  X[0].(ast.Attrib),
            Op:    X[1].(int),
            Right: X[2].(ast.Attrib),
        }, nil
		},
	},
	ProdTabEntry{
		String: `RelOp : gt	<< ast.GT, nil >>`,
		Id:         "RelOp",
		NTType:     18,
		Index:      34,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.GT, nil
		},
	},
	ProdTabEntry{
		String: `RelOp : lt	<< ast.LT, nil >>`,
		Id:         "RelOp",
		NTType:     18,
		Index:      35,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.LT, nil
		},
	},
	ProdTabEntry{
		String: `RelOp : neq	<< ast.NEQ, nil >>`,
		Id:         "RelOp",
		NTType:     18,
		Index:      36,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NEQ, nil
		},
	},
	ProdTabEntry{
		String: `Exp : Exp plus Term	<< ast.ExpressionNode{
            Op:    ast.PLUS,
            Left:  X[0].(ast.Attrib),
            Right: X[2].(ast.Attrib),
        }, nil >>`,
		Id:         "Exp",
		NTType:     19,
		Index:      37,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ExpressionNode{
            Op:    ast.PLUS,
            Left:  X[0].(ast.Attrib),
            Right: X[2].(ast.Attrib),
        }, nil
		},
	},
	ProdTabEntry{
		String: `Exp : Exp minus Term	<< ast.ExpressionNode{
            Op:    ast.MINUS,
            Left:  X[0].(ast.Attrib),
            Right: X[2].(ast.Attrib),
        }, nil >>`,
		Id:         "Exp",
		NTType:     19,
		Index:      38,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ExpressionNode{
            Op:    ast.MINUS,
            Left:  X[0].(ast.Attrib),
            Right: X[2].(ast.Attrib),
        }, nil
		},
	},
	ProdTabEntry{
		String: `Exp : Term	<< X[0], nil >>`,
		Id:         "Exp",
		NTType:     19,
		Index:      39,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term : Term times Factor	<< ast.ExpressionNode{
            Op:    ast.TIMES,
            Left:  X[0].(ast.Attrib),
            Right: X[2].(ast.Attrib),
        }, nil >>`,
		Id:         "Term",
		NTType:     20,
		Index:      40,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ExpressionNode{
            Op:    ast.TIMES,
            Left:  X[0].(ast.Attrib),
            Right: X[2].(ast.Attrib),
        }, nil
		},
	},
	ProdTabEntry{
		String: `Term : Term divide Factor	<< ast.ExpressionNode{
            Op:    ast.DIVIDE,
            Left:  X[0].(ast.Attrib),
            Right: X[2].(ast.Attrib),
        }, nil >>`,
		Id:         "Term",
		NTType:     20,
		Index:      41,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ExpressionNode{
            Op:    ast.DIVIDE,
            Left:  X[0].(ast.Attrib),
            Right: X[2].(ast.Attrib),
        }, nil
		},
	},
	ProdTabEntry{
		String: `Term : Factor	<< X[0], nil >>`,
		Id:         "Term",
		NTType:     20,
		Index:      42,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : Atom	<< X[0], nil >>`,
		Id:         "Factor",
		NTType:     21,
		Index:      43,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : plus Atom	<< X[1], nil >>`,
		Id:         "Factor",
		NTType:     21,
		Index:      44,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Factor : minus ExpVar	<< ast.ExpressionNode{
            Op:    ast.MINUS,
            Left:  &ast.VarNode{Type: "int", Value: "0"},
            Right: X[1].(ast.Attrib),
        }, nil >>`,
		Id:         "Factor",
		NTType:     21,
		Index:      45,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ExpressionNode{
            Op:    ast.MINUS,
            Left:  &ast.VarNode{Type: "int", Value: "0"},
            Right: X[1].(ast.Attrib),
        }, nil
		},
	},
	ProdTabEntry{
		String: `Factor : minus Cte	<< func() (Attrib, error) {
            // Convierte la constante a negativo
            n := X[1].(*ast.VarNode)
            n.Value = "-" + n.Value
            return n, nil
        }() >>`,
		Id:         "Factor",
		NTType:     21,
		Index:      46,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            // Convierte la constante a negativo
            n := X[1].(*ast.VarNode)
            n.Value = "-" + n.Value
            return n, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Atom : ExpVar	<< X[0], nil >>`,
		Id:         "Atom",
		NTType:     22,
		Index:      47,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Atom : Cte	<< X[0], nil >>`,
		Id:         "Atom",
		NTType:     22,
		Index:      48,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExpVar : lparen Expression rparen	<< X[1], nil >>`,
		Id:         "ExpVar",
		NTType:     23,
		Index:      49,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `ExpVar : F_Return	<< X[0], nil >>`,
		Id:         "ExpVar",
		NTType:     23,
		Index:      50,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExpVar : id	<< ast.ExpressionVar{
            Id: string(X[0].(*token.Token).Lit),
        }, nil >>`,
		Id:         "ExpVar",
		NTType:     23,
		Index:      51,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ExpressionVar{
            Id: string(X[0].(*token.Token).Lit),
        }, nil
		},
	},
	ProdTabEntry{
		String: `Cte : cte_int	<< &ast.VarNode{
            Type: "int",
            Value: string(X[0].(*token.Token).Lit),
        }, nil >>`,
		Id:         "Cte",
		NTType:     24,
		Index:      52,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return &ast.VarNode{
            Type: "int",
            Value: string(X[0].(*token.Token).Lit),
        }, nil
		},
	},
	ProdTabEntry{
		String: `Cte : cte_float	<< &ast.VarNode{
            Type: "float",
            Value: string(X[0].(*token.Token).Lit),
        }, nil >>`,
		Id:         "Cte",
		NTType:     24,
		Index:      53,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return &ast.VarNode{
            Type: "float",
            Value: string(X[0].(*token.Token).Lit),
        }, nil
		},
	},
	ProdTabEntry{
		String: `Condition : if lparen Expression rparen Body ElseOptional semicolon	<< ast.IfNode{
            Condition: X[2].(ast.Attrib),
            ThenBlock: X[4].([]ast.Attrib),
            ElseBlock: X[5].([]ast.Attrib),
        }, nil >>`,
		Id:         "Condition",
		NTType:     25,
		Index:      54,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.IfNode{
            Condition: X[2].(ast.Attrib),
            ThenBlock: X[4].([]ast.Attrib),
            ElseBlock: X[5].([]ast.Attrib),
        }, nil
		},
	},
	ProdTabEntry{
		String: `ElseOptional : else Body	<< X[1], nil >>`,
		Id:         "ElseOptional",
		NTType:     26,
		Index:      55,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `ElseOptional : "empty"	<< []ast.Attrib{}, nil >>`,
		Id:         "ElseOptional",
		NTType:     26,
		Index:      56,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []ast.Attrib{}, nil
		},
	},
	ProdTabEntry{
		String: `Cycle : while lparen Expression rparen do Body semicolon	<< ast.WhileNode{
            Condition: X[2].(ast.Attrib),
            Body: X[5].([]ast.Attrib),
        }, nil >>`,
		Id:         "Cycle",
		NTType:     27,
		Index:      57,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.WhileNode{
            Condition: X[2].(ast.Attrib),
            Body: X[5].([]ast.Attrib),
        }, nil
		},
	},
	ProdTabEntry{
		String: `F_Call : id lparen F_Args rparen semicolon	<< ast.FCallNode{
            Id: string(X[0].(*token.Token).Lit),
            Params: X[2].([]ast.Attrib),
        }, nil >>`,
		Id:         "F_Call",
		NTType:     28,
		Index:      58,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.FCallNode{
            Id: string(X[0].(*token.Token).Lit),
            Params: X[2].([]ast.Attrib),
        }, nil
		},
	},
	ProdTabEntry{
		String: `F_Return : id lparen F_Args rparen	<< ast.FCallNode{
            Id: string(X[0].(*token.Token).Lit),
            Params: X[2].([]ast.Attrib),
        }, nil >>`,
		Id:         "F_Return",
		NTType:     29,
		Index:      59,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.FCallNode{
            Id: string(X[0].(*token.Token).Lit),
            Params: X[2].([]ast.Attrib),
        }, nil
		},
	},
	ProdTabEntry{
		String: `F_Args : F_ArgsList	<< X[0], nil >>`,
		Id:         "F_Args",
		NTType:     30,
		Index:      60,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `F_Args : "empty"	<< []ast.Attrib{}, nil >>`,
		Id:         "F_Args",
		NTType:     30,
		Index:      61,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []ast.Attrib{}, nil
		},
	},
	ProdTabEntry{
		String: `F_ArgsList : Expression comma F_ArgsList	<< append([]ast.Attrib{ X[0].(ast.Attrib) }, X[2].([]ast.Attrib)..., ), nil >>`,
		Id:         "F_ArgsList",
		NTType:     31,
		Index:      62,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return append([]ast.Attrib{ X[0].(ast.Attrib) }, X[2].([]ast.Attrib)..., ), nil
		},
	},
	ProdTabEntry{
		String: `F_ArgsList : Expression	<< []ast.Attrib{ X[0].(ast.Attrib) }, nil >>`,
		Id:         "F_ArgsList",
		NTType:     31,
		Index:      63,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []ast.Attrib{ X[0].(ast.Attrib) }, nil
		},
	},
	ProdTabEntry{
		String: `Print : print lparen PrintVarList rparen semicolon	<< ast.PrintNode{
            Items: X[2].([]ast.Attrib),
        }, nil >>`,
		Id:         "Print",
		NTType:     32,
		Index:      64,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.PrintNode{
            Items: X[2].([]ast.Attrib),
        }, nil
		},
	},
	ProdTabEntry{
		String: `PrintVarList : PrintVar comma PrintVarList	<< append([]ast.Attrib{ X[0].(ast.Attrib) }, X[2].([]ast.Attrib)..., ), nil >>`,
		Id:         "PrintVarList",
		NTType:     33,
		Index:      65,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return append([]ast.Attrib{ X[0].(ast.Attrib) }, X[2].([]ast.Attrib)..., ), nil
		},
	},
	ProdTabEntry{
		String: `PrintVarList : PrintVar	<< []ast.Attrib{ X[0].(ast.Attrib) }, nil >>`,
		Id:         "PrintVarList",
		NTType:     33,
		Index:      66,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []ast.Attrib{ X[0].(ast.Attrib) }, nil
		},
	},
	ProdTabEntry{
		String: `PrintVar : Expression	<< X[0], nil >>`,
		Id:         "PrintVar",
		NTType:     34,
		Index:      67,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrintVar : cte_string	<< &ast.VarNode{
            Type: "string",
            Value: string(X[0].(*token.Token).Lit),
        },
        nil >>`,
		Id:         "PrintVar",
		NTType:     34,
		Index:      68,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return &ast.VarNode{
            Type: "string",
            Value: string(X[0].(*token.Token).Lit),
        },
        nil
		},
	},
	ProdTabEntry{
		String: `Return : return Expression semicolon	<< ast.ReturnNode{
            Exp: X[1].(ast.Attrib),
        }, nil >>`,
		Id:         "Return",
		NTType:     35,
		Index:      69,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ReturnNode{
            Exp: X[1].(ast.Attrib),
        }, nil
		},
	},
}
